import { logger } from '../lib/logger';
import { AppError } from '../lib/errors';

interface FactsGenerationRequest {
  clientId: string;
  clientName: string;
  caseReference?: string;
  documentIds: string[];
  documents: Array<{
    id: string;
    name: string;
    docNumber?: string;
    extractedData?: string;
    type: string;
    createdAt: string;
  }>;
}

interface FactsGenerationResponse {
  success: boolean;
  facts?: string;
  error?: string;
}

class FactsAIService {
  private readonly OPENAI_API_KEY = import.meta.env.VITE_OPENAI_API_KEY;
  private readonly MODEL = 'gpt-4o-mini-2024-07-18'; // Mapeado para gpt-4o-mini
  private readonly TIMEOUT = 120000; // 2 minutos

  /**
   * Gerar fatos usando IA baseado nos documentos selecionados
   */
  async generateFacts(request: FactsGenerationRequest): Promise<string> {
    const startTime = Date.now();
    
    try {
      if (!this.OPENAI_API_KEY) {
        logger.error('OpenAI API key not configured', new Error('OpenAI API key not configured'), {}, 'FactsAIService');
        throw new AppError('OpenAI API key not configured', 500);
      }

      console.log('ü§ñ Iniciando gera√ß√£o de fatos para cliente:', request.clientName);
      console.log('üìÑ Documentos selecionados:', request.documentIds.length);
      console.log('üìä Documentos com dados extra√≠dos:', request.documents.filter(d => d.extractedData).length);

      // Preparar dados dos documentos para o prompt
      const documentsInfo = request.documents.map(doc => ({
        id: doc.id,
        name: doc.name,
        docNumber: doc.docNumber || 'DOC n. XXX',
        type: doc.type,
        extractedData: doc.extractedData || 'Dados n√£o dispon√≠veis',
        createdAt: doc.createdAt
      }));

      // Construir prompt
      const prompt = this.buildPrompt(request, documentsInfo);

      // Fazer requisi√ß√£o para OpenAI
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), this.TIMEOUT);

      const response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${this.OPENAI_API_KEY}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          model: this.MODEL,
          messages: [
            {
              role: 'system',
              content: this.getSystemPrompt()
            },
            {
              role: 'user',
              content: prompt
            }
          ],
          temperature: 0.3,
          max_tokens: 4000
        }),
        signal: controller.signal
      });

      clearTimeout(timeoutId);

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new AppError(
          `OpenAI API error: ${response.status} - ${errorData.error?.message || response.statusText}`,
          500
        );
      }

      const data = await response.json();
      const generatedFacts = data.choices?.[0]?.message?.content?.trim();

      if (!generatedFacts) {
        console.log('‚ùå IA n√£o retornou fatos gerados');
        throw new AppError('No response from OpenAI', 500);
      }

      const duration = Date.now() - startTime;
      
      console.log('‚úÖ Gera√ß√£o de fatos conclu√≠da em', duration, 'ms');
      console.log('üìù Tamanho dos fatos gerados:', generatedFacts.length, 'caracteres');
      
      logger.info('Facts generation completed successfully', {
        clientId: request.clientId,
        clientName: request.clientName,
        documentCount: request.documentIds.length,
        duration,
        factsLength: generatedFacts.length
      }, 'FactsAIService');

      return generatedFacts;

    } catch (error) {
      const duration = Date.now() - startTime;
      
      if (error instanceof Error && error.name === 'AbortError') {
        console.log('‚è∞ Timeout na gera√ß√£o de fatos');
        logger.error('Timeout in facts generation', new Error('Timeout in facts generation'), {
          clientId: request.clientId,
          duration,
          timeout: this.TIMEOUT
        }, 'FactsAIService');
        throw new AppError('Timeout na gera√ß√£o de fatos', 408);
      }

      console.log('‚ùå Erro na gera√ß√£o de fatos:', error);
      logger.error('Error in facts generation', new Error(error instanceof Error ? error.message : 'Unknown error'), {
        clientId: request.clientId,
        duration
      }, 'FactsAIService');

      throw error;
    }
  }

  /**
   * Prompt do sistema para gera√ß√£o de fatos
   */
  private getSystemPrompt(): string {
    return `Voc√™ √© um assistente jur√≠dico especializado em an√°lise de documentos e gera√ß√£o de relat√≥rios de fatos para processos legais.

INSTRU√á√ïES IMPORTANTES:
1. Analise cuidadosamente todos os documentos fornecidos
2. Extraia informa√ß√µes relevantes dos dados extra√≠dos de cada documento
3. Organize os fatos de forma cronol√≥gica quando poss√≠vel
4. Use APENAS informa√ß√µes presentes nos documentos fornecidos
5. Se um documento n√£o tiver dados extra√≠dos, indique "Dados n√£o dispon√≠veis"
6. Siga EXATAMENTE o formato de sa√≠da especificado
7. Use as refer√™ncias de documentos fornecidas (DOC n. XXX)
8. Seja objetivo e factual, evitando especula√ß√µes
9. Mantenha linguagem jur√≠dica formal e clara
10. GERE TODO O CONTE√öDO EM PORTUGU√äS BRASILEIRO

FORMATO DE SA√çDA OBRIGAT√ìRIO:
- Use exatamente o template fornecido
- Substitua apenas os campos entre colchetes
- Mantenha toda a formata√ß√£o e estrutura
- N√£o adicione informa√ß√µes n√£o presentes nos documentos
- TODO O TEXTO DEVE ESTAR EM PORTUGU√äS BRASILEIRO`;
  }

  /**
   * Construir prompt para gera√ß√£o de fatos
   */
  private buildPrompt(request: FactsGenerationRequest, documentsInfo: any[]): string {
    const currentDate = new Date().toISOString().split('T')[0]; // YYYY-MM-DD
    
    return `
DOCUMENTOS PARA AN√ÅLISE E GERA√á√ÉO DE FATOS:

**Informa√ß√µes do Cliente:**
- Nome: ${request.clientName}
- ID: ${request.clientId}
- Refer√™ncia do Caso: ${request.caseReference || 'A ser preenchida'}
- Data de Processamento: ${currentDate}

**Documentos Selecionados (${documentsInfo.length}):**
${documentsInfo.map((doc, index) => `
DOCUMENTO ${index + 1}:
- ID: ${doc.id}
- Nome: ${doc.name}
- N√∫mero: ${doc.docNumber}
- Tipo: ${doc.type}
- Data de Cria√ß√£o: ${doc.createdAt}
- Dados Extra√≠dos:
${doc.extractedData}
---`).join('\n')}

**TAREFA:**
Analise todos os documentos acima e gere um relat√≥rio de fatos seguindo EXATAMENTE este formato:

===========================================================
RELAT√ìRIO NARRATIVO DE FATOS
Cliente: ${request.clientName}
Refer√™ncia do Caso: ${request.caseReference || '[REFER√äNCIA_DO_CASO]'}
Data de Processamento: ${currentDate}
===========================================================
 
1. RESUMO DO CASO
O presente caso trata de [resumo breve da disputa, ex: "viola√ß√£o contratual entre ${request.clientName} e EMPRESA B"].
A pretens√£o decorre de [base factual], e os fundamentos jur√≠dicos s√£o respaldados pela documenta√ß√£o anexa e por descri√ß√µes de √°udio ou informa√ß√µes consolidadas de resumo de reuni√£o jur√≠dica ou mensagens do cliente relatando o ocorrido. Fa√ßa uma descri√ß√£o detalhada.
 
2. CRONOLOGIA DOS FATOS
- [DATA] ‚Äì [Descri√ß√£o do evento com refer√™ncia ao documento comprobat√≥rio]
 
- [DATA] ‚Äì [Descri√ß√£o do evento, correspond√™ncia ou negocia√ß√£o]
 
- [DATA] ‚Äì [Descri√ß√£o da assinatura de contrato, viola√ß√£o ou ocorr√™ncia relevante]
 
- [DATA] ‚Äì [Comunica√ß√£o posterior, fatura ou evid√™ncia de danos]
 
 
3. FATOS PRINCIPAIS
- O requerente est√° devidamente representado conforme Procura√ß√£o
 (Refer√™ncia: DOC 02).
- A rela√ß√£o contratual entre as partes est√° evidenciada
 (Refer√™ncia: DOC 03).
- Os danos e viola√ß√£o de obriga√ß√µes s√£o comprovados por evid√™ncias de apoio
 (Refer√™ncia: DOC 04, DOC 05).
- A identifica√ß√£o e capacidade processual do requerente est√£o confirmadas
 (Refer√™ncia: DOC 01).
 
4. DECLARA√á√ïES DAS PARTES
- Declara√ß√£o do requerente: [Inserir resumo extra√≠do de mensagens ou documentos, ex: "O requerido deixou de prestar os servi√ßos contratados, causando preju√≠zos financeiros"].  
- Declara√ß√£o da parte contr√°ria: [Inserir resumo, se dispon√≠vel, de correspond√™ncia ou pe√ßas processuais].
Aplique apenas verificando resumo ou documenta√ß√£o do caso se j√° existir nos documentos. SE n√£o existir, n√£o leve em considera√ß√£o.
 
5. EVID√äNCIAS DE APOIO (Lista de Documentos Processados)
${documentsInfo.map((doc, index) => 
  `- DOC ${String(index + 1).padStart(2, '0')} ‚Äì ${request.clientName} ‚Äì ${this.getDocumentTypeDescription(doc.type)} ‚Äì ${doc.createdAt.split('T')[0]}`
).join('\n')}
 
===========================================================
FIM DO RELAT√ìRIO NARRATIVO DE FATOS
===========================================================

**IMPORTANTE:**
- Use APENAS informa√ß√µes presentes nos documentos fornecidos
- Se um documento n√£o tiver dados extra√≠dos, indique "Dados n√£o dispon√≠veis"
- Mantenha a formata√ß√£o exata do template
- Seja factual e objetivo
- Use as refer√™ncias de documentos corretas (DOC 01, DOC 02, etc.)
- Se n√£o houver informa√ß√µes suficientes para uma se√ß√£o, indique "Informa√ß√µes n√£o dispon√≠veis nos documentos fornecidos"

**RESPOSTA (apenas o relat√≥rio formatado):**
`;
  }

  /**
   * Obter descri√ß√£o do tipo de documento
   */
  private getDocumentTypeDescription(type: string): string {
    const typeMap: Record<string, string> = {
      'pdf': 'Documento',
      'image': 'Evid√™ncia Fotogr√°fica',
      'audio': 'Grava√ß√£o de √Åudio',
      'video': 'Evid√™ncia em V√≠deo',
      'docx': 'Documento Word',
      'txt': 'Documento de Texto',
      'other': 'Documento de Apoio'
    };
    
    return typeMap[type.toLowerCase()] || 'Documento de Apoio';
  }

  /**
   * Verificar se o servi√ßo est√° configurado
   */
  isConfigured(): boolean {
    return !!this.OPENAI_API_KEY;
  }
}

export const factsAIService = new FactsAIService();
export type { FactsGenerationRequest, FactsGenerationResponse };
