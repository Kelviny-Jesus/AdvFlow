// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://qywpltlltaokavsfibre.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InF5d3BsdGxsdGFva2F2c2ZpYnJlIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTU5NzM0MTcsImV4cCI6MjA3MTU0OTQxN30.0aMUoXZb1XOTRmosM4FlbPKLyRpfZBWyYZmxgAfLA9w";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
  }
});

// Temporary dev auth: hardcoded user id
export const DEV_USER_ID = "48b07eba-b1a8-456f-b124-c46a149eb62a";

// Monkeypatch minimal auth methods used by the app so services can operate without real login
// getUser
(supabase.auth.getUser as unknown as () => Promise<any>) = async () => {
  return { data: { user: { id: DEV_USER_ID } }, error: null };
};

// getSession (for potential callers)
(supabase.auth.getSession as unknown as () => Promise<any>) = async () => {
  return { data: { session: { user: { id: DEV_USER_ID } } }, error: null };
};

// onAuthStateChange (no-op subscription)
(supabase.auth.onAuthStateChange as unknown as any) = (_cb: any) => ({ data: { subscription: { unsubscribe: () => {} } } });

// signOut (no-op)
(supabase.auth.signOut as unknown as () => Promise<any>) = async () => ({ error: null });